/**
 * 링크
    -
 * 문제
    - n x m 크기의 얼음 틀이 있다.
    구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.
    구멍이 뚫려 있는 부분까지 상하좌우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.
    이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성해라
 * 제한 조건
    -
 * 예시
    입력 n, m, ices
      1. 15, 14
        [
          [0,0,0,0,0,1,1,1,1,0,0,0,0,0],
          [1,1,1,1,1,1,0,1,1,1,1,1,1,0],
          [1,1,0,1,1,1,0,1,1,0,1,1,1,0],
          [1,1,0,1,1,1,0,1,1,0,0,0,0,0],
          [1,1,0,1,1,1,1,1,1,1,1,1,1,1],
          [1,1,0,1,1,1,1,1,1,1,1,1,0,0],
          [1,1,0,0,0,0,0,0,0,1,1,1,1,1],
          [0,1,1,1,1,1,1,1,1,1,1,1,1,1],
          [0,0,0,0,0,0,0,0,0,1,1,1,1,1],
          [0,1,1,1,1,1,1,1,1,1,1,0,0,0],
          [0,0,0,1,1,1,1,1,1,1,1,0,0,0],
          [0,0,0,0,0,0,0,1,1,1,1,0,0,0],
          [1,1,1,1,1,1,1,1,1,1,0,0,1,1],
          [1,1,1,0,0,0,1,1,1,1,1,1,1,1],
          [1,1,1,0,0,0,1,1,1,1,1,1,1,1]
        ]
    출력
      1. 8
 * 풀이
    1.
 * ETC
    -
*/

function solution(n, m, ices) {
  function dfs(y, x) {
    if (y <= -1 || y >= n || x <= -1 || x >= n) {
      return false;
    }

    if (ices[y][x] === 0) {
      ices[y][x] = 1;

      dfs(y - 1, x);
      dfs(y, x - 1);
      dfs(y + 1, x);
      dfs(y, x + 1);
      return true;
    }
    return false;
  }

  let result = 0;
  for(let i = 0; i < n; i++) {
    for (let j = 0; j < m; j++) {
      if (dfs(i, j) === true) {
        result += 1;
      }
    }
  }

  return result;
}

console.log(solution(15, 14,
  [
    [0,0,0,0,0,1,1,1,1,0,0,0,0,0],
    [1,1,1,1,1,1,0,1,1,1,1,1,1,0],
    [1,1,0,1,1,1,0,1,1,0,1,1,1,0],
    [1,1,0,1,1,1,0,1,1,0,0,0,0,0],
    [1,1,0,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,0,0,0,0,0,0,0,1,1,1,1,1],
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,1,1,1,1,1],
    [0,1,1,1,1,1,1,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,1,1,1,1,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,1,1],
    [1,1,1,0,0,0,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,1,1,1,1,1,1,1,1]
  ])
  === 8,
)