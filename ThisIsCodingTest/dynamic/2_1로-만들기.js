/**
 * 링크
    -
 * 문제
    - 정수 X가 주어질 때 정수 X에 사용할 수 있는 연산은 4가지다.
      1. X가 5로 나누어 떨어지면, 5로 나눈다.
      2. X가 3으로 나누어 떨어지면, 3으로 나눈다.
      3. X가 2로 나누어 떨어지면, 2로 나눈다.
      4. X에서 1을 뺀다.
    
    적절히 연산을 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오
 * 제한 조건
    -
 * 예시
    입력
      1. 26
    출력
      1. 3
 * 풀이
    1. 각각의 값을 만들 수 있는 최소 연산 횟수를 바텀업 방식으로 구한다.
    2. 1 = 최소 연산 횟수 0, 2 = 최소 연산 횟수 1, 3 = 최소 연산 횟수 1, 5 = 최소 연산 횟수 1
 * ETC
    -
*/



function solution(x) {
  const d = new Array(30).fill(0);

  for (let i = 2; i <= x; i++) {
    // 현재의 수에서 1을 빼는 경우
    // 1을 빼고 시작하는 이유 : 다음에 계산할 나누기에서 '1을 뺀값'과 비교하여 횟수가 적은 것으로 교체될 것이라
    d[i] = d[i - 1] + 1;

    // 1을 더하는 이유 : d는 계산 횟수이기 때문에, d[i]에 더하지 않는 이유는 위에서 1을 뺄 때 더해줬기 때문
    if (i % 2 === 0) d[i] = Math.min(d[i], d[i / 2] + 1);
    if (i % 3 === 0) d[i] = Math.min(d[i], d[i / 3] + 1);
    if (i % 5 === 0) d[i] = Math.min(d[i], d[i / 5] + 1);
  }

  console.log(d);
  return d[x];
};

console.log(solution(26) === 3);
