/**
 * 링크
    -
 * 문제
    - A, B 두 사람이 볼링을 치고 있습니다. 두 사람은 서로 무게가 다른 볼링공을 고르려고 합니다.
      볼링공은 총 N개가 있으며 각 볼링공마다 무게가 적혀있고, 공의 번호는 1번부터 순서대로 부여됩니다.
      또한 같은 무게의 공이 여러 개 있을 수 있지만, 서로 다른 공으로 간주합니다.
      볼링공의 무게는 1부터 M까지의 자연수 형태로 존재합니다.

      예를 들어 N이 5이고, M이 3이며 각각의 무게가 차례대로 1,3,2,3,2일 때 각 공의 번호가 차례대로 1번부터 5번까지 부여됩니다.
      이때 두 사람이 고를 수 있는 볼링공 번호의 조합을 구하면 다음과 같습니다.
      (1,2), (1,3), (1,4), (1,5), (2,3), (2,5), (3,4), (4,5)
 * 제한 조건
    -
 * 예시
    입력
      N: 볼링공의 수 (1 <= N <= 10000)
      M: 공의 최대 무게 (1 <= M <= 10)
      arr: 볼링공 무게 K 배열 (1 <= K <= N)
      1. 5, 3, [1,3,2,3,2]
      2. 8, 5, [1,5,4,3,2,4,5,2]
    출력
      1. 8
      2. 25
 * 풀이
    1. 볼링공을 무게순대로 정렬한다.
    2. 조합이므로 순서 고려 X
    3. 정렬한 볼링공 배열 처음부터 현재 볼링공 무게와 다른 나머지 합들을 계속 더한다.
 * ETC
    -
*/

function solution(N, M, arr) {
  let answer = 0;
  const sorting_arr = [...arr].sort((a, b) => a - b);

  for (let weight of sorting_arr) {
    const lastSameWeightIndex = sorting_arr.lastIndexOf(weight);
    answer += (N - (lastSameWeightIndex + 1));
  }
  return answer;
}

console.log(solution(5, 3, [1,3,2,3,2]) === 8);
console.log(solution(8, 5, [1,5,4,3,2,4,5,2]) === 25);